 CREATE TABLE Category (
    ID SERIAL PRIMARY KEY,
    Generic_Name VARCHAR(255) NOT NULL,
    Description VARCHAR(255) NOT NULL
);


CREATE TABLE medical_representative (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    designation VARCHAR(50)
    -- Add other columns as needed
);



CREATE TABLE Drug_Square (
    ID SERIAL PRIMARY KEY,
    Medicine_Name VARCHAR(255) NOT NULL,
    Category_ID INTEGER REFERENCES Category(ID),
    Strip_Price DECIMAL(10, 2) NOT NULL,
    Unit_Price DECIMAL(10, 2) NOT NULL,
    Expire_Date DATE NOT NULL,
    Manufacturing_Date DATE NOT NULL,
     remedies VARCHAR(255),
     representative_id INT REFERENCES medical_representative(id)
);




-----------------------------------------------------------------------------------------------------------

-----------------------------------------
CREATE TABLE pharmacy (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL 

 
);
   ALTER TABLE pharmacy
ADD CONSTRAINT unique_name_constraint UNIQUE (name);

ALTER TABLE medical_representative 
ADD COLUMN salary INTEGER default 10000;

CREATE TABLE customer (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) UNIQUE NOT NULL,
    age INTEGER CHECK (age > 14),
    location VARCHAR(255),
    email VARCHAR(255) UNIQUE,
    phone_number VARCHAR(9) UNIQUE CHECK (LENGTH(phone_number) = 9),
    gender VARCHAR(10)
);

CREATE TABLE pharmacy_medical_representative (
    pharmacy_id INT REFERENCES pharmacy(id),
    representative_id INT REFERENCES medical_representative(id),
    -- Add other columns specific to this relationship
    PRIMARY KEY (pharmacy_id, representative_id)
);
-- Insert data into the pharmacy table
INSERT INTO pharmacy (name) VALUES
    ('Pharmacy One'),
    ('Pharmacy Two'),
    ('Pharmacy Three'),
    ('Pharmacy Four'),
    ('Pharmacy Five'),
    ('Pharmacy Six'),
    ('Pharmacy Seven'),
    ('Pharmacy Eight'),
    ('Pharmacy Nine'),
    ('Pharmacy Ten');

-- Insert data into the medical_representative table
INSERT INTO medical_representative (name, designation) VALUES
    ('John Smith', 'Representative 1'),
    ('Jane Doe', 'Representative 2'),
    ('Bob Anderson', 'Representative 3'),
    ('Alice Johnson', 'Representative 4'),
    ('Charlie Brown', 'Representative 5'),
    ('Diana Williams', 'Representative 6'),
    ('Evan Davis', 'Representative 7'),
    ('Fiona White', 'Representative 8'),
    ('George Miller', 'Representative 9'),
    ('Helen Taylor', 'Representative 10');

-- Insert data into the pharmacy_medical_representative junction table
INSERT INTO pharmacy_medical_representative (pharmacy_id, representative_id) VALUES
    (1, 1),
    (1, 2),
    (2, 3),
    (2, 4),
    (3, 5),
    (3, 6),
    (4, 7),
    (4, 8),
    (5, 9),
    (5, 10);
------------------------------


--------------------------
CREATE TABLE Pharmacy_Drug_Association (
    pharmacy_id INTEGER REFERENCES pharmacy(id),
    drug_id INTEGER REFERENCES Drug_Square(ID),
    PRIMARY KEY (pharmacy_id, drug_id),
     order_from_pharm INTEGER DEFAULT 0,
 
    profit_percent DECIMAL(5,2) DEFAULT 1.25
);



---------------------------------------
ALTER TABLE Drug_Square
ADD COLUMN total_drug_out INTEGER DEFAULT 0;
-------------------------------------
ALTER TABLE Drug_Square
ADD COLUMN total_sell DECIMAL(10, 2) DEFAULT 0.00;



------------------------------------
CREATE TABLE temp_order_pharma (
    id SERIAL PRIMARY KEY,
    pharmacy_id INTEGER REFERENCES pharmacy(id),
    drug_id INTEGER REFERENCES Drug_Square(id),
    count INTEGER NOT NULL,
    total_price DECIMAL(10, 2) NOT NULL
);

------------
CREATE TABLE advertise (
    pharmacy_id INT REFERENCES pharmacy(id),
    medical_representative_id INT REFERENCES medical_representative(id),
    drug_id INT REFERENCES drug_square(id),
    advertises TEXT DEFAULT 'hello, nice to meet you',
    PRIMARY KEY (pharmacy_id, medical_representative_id, drug_id)
);
CREATE TABLE add_cart (
    customer_id INT REFERENCES customer(id),
    pharmacy_id INT REFERENCES pharmacy(id),
    drug_id INT REFERENCES Drug_Square(ID),
    amount_of_cart INT CHECK (amount_of_cart > 0),
    PRIMARY KEY (customer_id, pharmacy_id, drug_id)
);


CREATE TABLE purchased_medicines (
    customer_id INT REFERENCES customer(id),
    pharmacy_id INT REFERENCES pharmacy(id),
    drug_id INT REFERENCES Drug_Square(ID),
    amount_purchased INT CHECK (amount_purchased > 0),
    cost INT DEFAULT 0,
    PRIMARY KEY (customer_id, pharmacy_id, drug_id)
);
CREATE TABLE done_purchased_medicines (
    customer_id INT REFERENCES customer(id),
    pharmacy_id INT REFERENCES pharmacy(id),
    drug_id INT REFERENCES Drug_Square(ID),
    amount_purchased INT CHECK (amount_purchased > 0),
    cost NUMERIC(10,2) DEFAULT 0.00,
    PRIMARY KEY (customer_id, pharmacy_id, drug_id)
);

CREATE TABLE done_purchased_medicines_backup (
    id serial,
    customer_id INT REFERENCES customer(id),
    pharmacy_id INT REFERENCES pharmacy(id),
    drug_id INT REFERENCES Drug_Square(ID),
    amount_purchased INT CHECK (amount_purchased > 0),
    cost NUMERIC(10,2) DEFAULT 0.00,
    PRIMARY KEY (customer_id, pharmacy_id, drug_id,id)
);


ALTER TABLE pharmacy_drug_association
ADD COLUMN total_sell_med  NUMERIC(10, 2) DEFAULT 0.00;


CREATE TABLE special_customer (
    id SERIAL PRIMARY KEY,
    pharmacy_id INT REFERENCES pharmacy(id),
    customer_id INT REFERENCES customer(id),
    date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
CREATE TABLE customer_order_done (
    order_id INTEGER  ,
    customer_id INT REFERENCES customer(id),
    pharmacy_id INT REFERENCES pharmacy(id),
    drug_id INT REFERENCES Drug_Square(ID),
    amount_purchased INT CHECK (amount_purchased > 0),
    cost NUMERIC(10, 2) DEFAULT 0.00,
    
    primary key (customer_id,pharmacy_id,drug_id,order_id)
);
CREATE TABLE order_backup_table (
    order_id INTEGER,
    customer_id INT,
    pharmacy_id INT,
    drug_id INT,
    amount_purchased INT CHECK (amount_purchased > 0),
    cost NUMERIC(10, 2) DEFAULT 0.00,
    
    PRIMARY KEY (customer_id, pharmacy_id, drug_id, order_id)
);
CREATE TABLE backup_table_temp_order_pharma (
    id SERIAL PRIMARY KEY,
    pharmacy_id INTEGER,
    drug_id INTEGER,
    count INTEGER NOT NULL,
    total_price DECIMAL(10, 2) NOT NULL
);

CREATE TABLE advertise_salary (
    medical_representative_id INTEGER PRIMARY KEY REFERENCES medical_representative(id),
    count_advertise INTEGER,
    salary INTEGER NOT NULL
    -- Add other columns as needed
);




--NEWLY ADDED JINISHPOTRO-----------------------------------------








INSERT INTO Drug_Square (Medicine_Name, Category_ID, Strip_Price, Unit_Price, Expire_Date, Manufacturing_Date, representative_id)
VALUES
('Accuzith', (SELECT ID FROM Category WHERE Generic_Name = 'Azithromycin Dihydrate' AND Description = '500 mg' LIMIT 1), 150.00, 30.00, '2024-01-01', '2023-01-01', 2),
('Accuzith', (SELECT ID FROM Category WHERE Generic_Name = 'Azithromycin Dihydrate' AND Description = '200 mg/5 ml' LIMIT 1), 80.00, 16.00, '2023-02-01', '2022-02-01', 6),
('Ace', (SELECT ID FROM Category WHERE Generic_Name = 'Paracetamol' AND Description = '500 mg' LIMIT 1), 10.00, 2.00, '2023-03-01', '2022-03-01', 5),
('Ace', (SELECT ID FROM Category WHERE Generic_Name = 'Paracetamol' AND Description = '120 mg/5 ml' LIMIT 1), 15.00, 3.00, '2023-04-01', '2022-04-01', 3),
('Ace', (SELECT ID FROM Category WHERE Generic_Name = 'Paracetamol' AND Description = '80 mg/ml' LIMIT 1), 20.00, 4.00, '2023-05-01', '2022-05-01', 2),
('Ace', (SELECT ID FROM Category WHERE Generic_Name = 'Paracetamol' AND Description = '125 mg' LIMIT 1), 25.00, 5.00, '2023-06-01', '2022-06-01', 1),
('Ace', (SELECT ID FROM Category WHERE Generic_Name = 'Paracetamol' AND Description = '250 mg' LIMIT 1), 30.00, 6.00, '2023-07-01', '2022-07-01', 1),
('Ace', (SELECT ID FROM Category WHERE Generic_Name = 'Paracetamol' AND Description = '500 mg' LIMIT 1), 35.00, 7.00, '2023-08-01', '2022-08-01', 8),
('Ace', (SELECT ID FROM Category WHERE Generic_Name = 'Paracetamol' AND Description = '120 mg/5 ml' LIMIT 1), 40.00, 8.00, '2023-09-01', '2022-09-01', 1),
('Ace', (SELECT ID FROM Category WHERE Generic_Name = 'Paracetamol (IV Infusion)' AND Description = '10 mg/ml' LIMIT 1), 45.00, 9.00, '2023-10-01', '2022-10-01', 6),
('Ace Plus', (SELECT ID FROM Category WHERE Generic_Name = 'Paracetamol + Caffeine' AND Description = '500 mg + 65 mg' LIMIT 1), 50.00, 10.00, '2023-11-01', '2022-11-01', 9),
('Ace Power', (SELECT ID FROM Category WHERE Generic_Name = 'Paracetamol' AND Description = '1000 mg' LIMIT 1), 60.00, 12.00, '2023-12-01', '2022-12-01', 7),
('Ace XR', (SELECT ID FROM Category WHERE Generic_Name = 'Paracetamol' AND Description = '665 mg (Extended Release)' LIMIT 1), 55.00, 11.00, '2024-01-01', '2023-01-01', 1),
('Acebid', (SELECT ID FROM Category WHERE Generic_Name = 'Aceclofenac' AND Description = '100 mg' LIMIT 1), 18.00, 3.60, '2024-02-01', '2023-02-01', 5),
('Acecard', (SELECT ID FROM Category WHERE Generic_Name = 'Ramipril' AND Description = '1.25 mg' LIMIT 1), 12.00, 2.40, '2024-03-01', '2023-03-01', 4),
('Acecard', (SELECT ID FROM Category WHERE Generic_Name = 'Ramipril' AND Description = '2.5 mg' LIMIT 1), 15.00, 3.00, '2024-04-01', '2023-04-01', 3);



-- Inserting records into Pharmacy_Drug_Association for each medicine and each pharmacy
INSERT INTO Pharmacy_Drug_Association (pharmacy_id, drug_id)
SELECT p.id, ds.ID
FROM pharmacy p
CROSS JOIN Drug_Square ds;

-- Updating order_from_pharm column to indicate availability (assuming 1 for available)
UPDATE Pharmacy_Drug_Association
SET order_from_pharm = 1;

-- Commit the transaction
COMMIT;


ALTER TABLE Pharmacy_Drug_Association
ADD COLUMN amount_od_drug INTEGER DEFAULT 0;






UPDATE Pharmacy_Drug_Association
SET amount_od_drug = 450;


ALTER TABLE backup_table_temp_order_pharma
ADD COLUMN purchase_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP;





INSERT INTO Drug_Square (Medicine_Name,  Category_ID, Strip_Price, Unit_Price, Expire_Date, Manufacturing_Date, representative_id) VALUES
('Zinpro', (SELECT ID FROM Category WHERE Generic_Name = 'Zinc Sulfate Monohydrate' AND Description = '10 mg/5 ml' LIMIT 1),150.00, 30.00, '2024-01-01', '2023-01-01', 2),
('Zins',  (SELECT ID FROM Category WHERE Generic_Name = 'Zinc Sulfate Monohydrate' AND Description = '10 mg/5 ml' LIMIT 1), 15.00, 3.00, '2024-04-01', '2023-04-01', 3),
('Zinsul',  (SELECT ID FROM Category WHERE Generic_Name = 'Zinc Sulfate Monohydrate' AND Description = '4.05 mg/5 ml' LIMIT 1), 60.00, 12.00, '2023-12-01', '2022-12-01', 7),
('Zinta-', (SELECT ID FROM Category WHERE Generic_Name = 'Zinc Sulfate Monohydrate' AND Description = '2020 mg/5 ml'LIMIT 1),60.00, 12.00, '2023-12-01', '2022-12-01', 7),
('Zinton',(SELECT ID FROM Category WHERE Generic_Name = 'Zinc Sulfate Monohydrate' AND Description = '10 mg/5 ml' LIMIT 1), 60.00, 12.00, '2023-12-01', '2022-12-01', 7),
('Zipol', (SELECT ID FROM Category WHERE Generic_Name = 'Zinc Sulfate Monohydrate' AND Description = '10 mg/5 ml' LIMIT 1), 80.00, 16.00, '2023-02-01', '2022-02-01', 6),
('Zipol',  (SELECT ID FROM Category WHERE Generic_Name = 'Zinc Sulfate Monohydrate' AND Description = '20 mg' LIMIT 1), 15.00, 3.00, '2024-04-01', '2023-04-01', 3),
('Zipol Plus',  (SELECT ID FROM Category WHERE Generic_Name = 'Vitamin B Complex + Zinc' AND Description = 'Plus' LIMIT 1), 80.00, 16.00, '2023-02-01', '2022-02-01', 6),
('Zipol-B',  (SELECT ID FROM Category WHERE Generic_Name = 'Vitamin B Complex + Zinc' AND Description = '-B' LIMIT 1), 60.00, 12.00, '2023-12-01', '2022-12-01', 7),
('Zipradon', (SELECT ID FROM Category WHERE Generic_Name = 'Ziprasidone' AND Description = '20 mg' LIMIT 1), 15.00, 3.00, '2024-04-01', '2023-04-01', 3),
('Zipradon', (SELECT ID FROM Category WHERE Generic_Name = 'Ziprasidone' AND Description = '40 mg' LIMIT 1), 15.00, 3.00, '2024-04-01', '2023-04-01', 3),
('Ziqui', (SELECT ID FROM Category WHERE Generic_Name = 'Zinc Sulfate Monohydrate' AND Description = '10 mg/5 ml' LIMIT 1),  45.00, 9.00, '2023-10-01', '2022-10-01', 6),
('Zirgan',  (SELECT ID FROM Category WHERE Generic_Name = 'Ganciclovir (Ophthalmic)' AND Description = '0.15%' LIMIT 1), 45.00, 9.00, '2023-10-01', '2022-10-01', 6),
('Ziron-F',(SELECT ID FROM Category WHERE Generic_Name = 'Ferrous Sulfate + Folic Acid + Zinc Sulfate' AND Description = '150 mg+0.5 mg+61.8 mg' LIMIT 1), 60.00, 12.00, '2023-12-01', '2022-12-01', 7),
('Zis-DS', (SELECT ID FROM Category WHERE Generic_Name = 'Zinc Sulfate Monohydrate' AND Description = '10 mg/5 ml' LIMIT 1),  45.00, 9.00, '2023-10-01', '2022-10-01', 6),
('Ziska Oral Saline',  (SELECT ID FROM Category WHERE Generic_Name = 'Oral rehydration salt [glucose based]' AND Description = '10.25 gm' LIMIT 1), 45.00, 9.00, '2023-10-01', '2022-10-01', 6),
('Ziskavit',  (SELECT ID FROM Category WHERE Generic_Name = 'Vitamin B complex' AND Description = '' LIMIT 1),  45.00, 9.00, '2023-10-01', '2022-10-01', 6),
('Ziskavit-M', (SELECT ID FROM Category WHERE Generic_Name = 'Multivitamin [Adult preparation]' AND Description = '' LIMIT 1),  45.00, 9.00, '2023-10-01', '2022-10-01', 6),
('Zismo', (SELECT ID FROM Category WHERE Generic_Name = 'Zinc Sulfate Monohydrate' AND Description = '10 mg/5 ml' LIMIT 1),  45.00, 9.00, '2023-10-01', '2022-10-01', 6),
('Zismo-B', (SELECT ID FROM Category WHERE Generic_Name = 'Vitamin B Complex + Zinc' AND Description = '-B' LIMIT 1),35.00, 7.00, '2023-08-01', '2022-08-01', 8),
('Zispin',  (SELECT ID FROM Category WHERE Generic_Name = 'Mirtazapine' AND Description = '30 mg' LIMIT 1),  45.00, 9.00, '2023-10-01', '2022-10-01', 6),
('Zispin',  (SELECT ID FROM Category WHERE Generic_Name = 'Mirtazapine' AND Description = '7.5 mg' LIMIT 1),35.00, 7.00, '2023-08-01', '2022-08-01', 8),
('Zistacin',  (SELECT ID FROM Category WHERE Generic_Name = 'Chlorpheniramine Maleate' AND Description = '2 mg/5 ml' LIMIT 1), 60.00, 12.00, '2023-12-01', '2022-12-01', 7),
('Zistacin', (SELECT ID FROM Category WHERE Generic_Name = 'Chlorpheniramine Maleate' AND Description = '4 mg' LIMIT 1),  45.00, 9.00, '2023-10-01', '2022-10-01', 6),
('Zisul',  (SELECT ID FROM Category WHERE Generic_Name = 'Zinc Sulfate Monohydrate' AND Description = '10 mg/5 ml' LIMIT 1), 60.00, 12.00, '2023-12-01', '2022-12-01', 7),
('Zisulmet',  (SELECT ID FROM Category WHERE Generic_Name = 'Zinc Sulfate Monohydrate' AND Description = '10 mg/5 ml'LIMIT 1), 35.00, 7.00, '2023-08-01', '2022-08-01', 8),
('Zita',  (SELECT ID FROM Category WHERE Generic_Name = 'Azithromycin Dihydrate' AND Description = '500 mg' LIMIT 1), 80.00, 16.00, '2023-02-01', '2022-02-01', 6),
('Zita',  (SELECT ID FROM Category WHERE Generic_Name = 'Azithromycin Dihydrate' AND Description = '200 mg/5 ml' LIMIT 1), 35.00, 7.00, '2023-08-01', '2022-08-01', 8),
('Zita',  (SELECT ID FROM Category WHERE Generic_Name = 'Azithromycin Dihydrate (Ophthalmic)' AND Description = '1%' LIMIT 1), 80.00, 16.00, '2023-02-01', '2022-02-01', 6),
('Ziten',  (SELECT ID FROM Category WHERE Generic_Name = 'Ketotifen Fumarate (Oral)' AND Description = '1 mg' LIMIT 1), 60.00, 12.00, '2023-12-01', '2022-12-01', 7);





ALTER TABLE medical_representative
ADD COLUMN status VARCHAR(20) DEFAULT 'Active' NOT NULL;



ALTER TABLE customer
DROP COLUMN phone_number,
DROP COLUMN age;


ALTER TABLE customer
ADD COLUMN age INTEGER;

ALTER TABLE customer
ADD COLUMN phone_number VARCHAR(11);

-----------------------------------------------EKAHAN PORJONTO---------------------------------
---TRIGGER -1



 
CREATE OR REPLACE FUNCTION insert_into_backup()
RETURNS TRIGGER AS $$
BEGIN
    INSERT INTO backup_table_temp_order_pharma (pharmacy_id, drug_id, count, total_price, purchase_date)
    VALUES (NEW.pharmacy_id, NEW.drug_id, NEW.amount_od_drug, NEW.total_sell_med, CURRENT_TIMESTAMP);
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;
CREATE TRIGGER trigger_insert_into_backup
AFTER INSERT ON Pharmacy_Drug_Association
FOR EACH ROW
EXECUTE FUNCTION insert_into_backup();


--------------------TRIGGER -2


-- Create a trigger function to delete records from temp_order_pharma
CREATE OR REPLACE FUNCTION delete_from_temp_order()
RETURNS TRIGGER AS $$
BEGIN
    DELETE FROM temp_order_pharma WHERE pharmacy_id = NEW.pharmacy_id AND drug_id = NEW.drug_id;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create a trigger that fires after an insertion into backup_table_temp_order_pharma
CREATE TRIGGER trigger_delete_from_temp_order
AFTER INSERT ON backup_table_temp_order_pharma
FOR EACH ROW
EXECUTE FUNCTION delete_from_temp_order();

------------Procedure 1
CREATE OR REPLACE PROCEDURE delete_order(pharmacy_id INT, drug_id INT)
LANGUAGE plpgsql
AS $$
BEGIN
    DELETE FROM temp_order_pharma WHERE pharmacy_id = delete_order.pharmacy_id AND drug_id = delete_order.drug_id;
END;
$$;




-------Procedure 2

CREATE OR REPLACE PROCEDURE delete_representative_and_associations(rep_id INTEGER) AS $$
BEGIN
    -- Update drug_square to set representative_id to NULL
    UPDATE drug_square SET representative_id = NULL WHERE representative_id = rep_id;

    -- Delete the representative from pharmacy_medical_representative table
    DELETE FROM pharmacy_medical_representative WHERE representative_id = rep_id;

    -- Now delete the representative from medical_representative table
    DELETE FROM medical_representative WHERE id = rep_id;
END;
$$ LANGUAGE plpgsql;



-------Procedure 3
CREATE OR REPLACE PROCEDURE add_medical_representative(
    IN p_name VARCHAR,
    IN p_designation VARCHAR,
    IN p_salary INT,
    IN p_pharmacies INT[]
)
AS $$
DECLARE
    rep_id INT;
    pharmacy_id INT;
BEGIN
    -- Insert into medical_representative table
    INSERT INTO medical_representative (name, designation, salary) VALUES (p_name, p_designation, p_salary) RETURNING id INTO rep_id;

    -- Insert into pharmacy_medical_representative table for each selected pharmacy
    FOREACH pharmacy_id IN ARRAY p_pharmacies
    LOOP
        INSERT INTO pharmacy_medical_representative (pharmacy_id, representative_id) VALUES (pharmacy_id, rep_id);
    END LOOP;
END;
$$ LANGUAGE plpgsql;





-----------TRIGGER-3


CREATE OR REPLACE FUNCTION before_delete_representative()
RETURNS TRIGGER AS $$
BEGIN
    IF OLD.status = 'Active' THEN
        -- Raise a notice to reassign medicines
        RAISE NOTICE 'Before deleting representative %, make sure to reassign their medicines to another representative.', OLD.name;
    END IF;
    RETURN OLD;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_before_delete_representative
BEFORE DELETE ON medical_representative
FOR EACH ROW
EXECUTE FUNCTION before_delete_representative();



---------------Trigger 4 and  5

-- Drop existing triggers if any
DROP TRIGGER IF EXISTS age_constraint ON customer;
DROP TRIGGER IF EXISTS phone_number_constraint ON customer;

-- Create trigger function to check age constraint
CREATE OR REPLACE FUNCTION check_age_constraint()
RETURNS TRIGGER AS $$
BEGIN
    IF NEW.age <= 14 THEN
        RAISE EXCEPTION 'Age must be greater than 14';
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create trigger function to check phone number constraint
CREATE OR REPLACE FUNCTION check_phone_number_constraint()
RETURNS TRIGGER AS $$
BEGIN
    IF LENGTH(NEW.phone_number) <> 11 THEN
        RAISE EXCEPTION 'Phone number must be exactly 11 digits long';
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create triggers to enforce the constraints
CREATE TRIGGER age_constraint
BEFORE INSERT OR UPDATE ON customer
FOR EACH ROW
EXECUTE FUNCTION check_age_constraint();

CREATE TRIGGER phone_number_constraint
BEFORE INSERT OR UPDATE ON customer
FOR EACH ROW
EXECUTE FUNCTION check_phone_number_constraint();

-----------FUNCTION 1



CREATE OR REPLACE FUNCTION update_cart_quantity(
    p_customer_id INT,
    p_medicine_id INT,
    p_pharmacy_id INT,
    p_update_quantity INT
) RETURNS VOID AS $$
BEGIN
    -- Check if the update quantity is valid
    IF p_update_quantity >= 0 THEN
        -- Update the quantity in the add_cart table
        UPDATE add_cart 
        SET amount_of_cart = p_update_quantity 
        WHERE customer_id = p_customer_id 
            AND drug_id = p_medicine_id 
            AND pharmacy_id = p_pharmacy_id;
        RETURN;
    ELSE
        RAISE EXCEPTION 'Invalid update quantity';
    END IF;
EXCEPTION
    WHEN others THEN
        RAISE EXCEPTION 'Error updating cart quantity: %', SQLERRM;
END;
$$ LANGUAGE plpgsql;


-----------FUNCTION 2
CREATE OR REPLACE FUNCTION delete_cart(
    p_customer_id INTEGER,
    p_medicine_id INTEGER,
    p_pharmacy_id INTEGER
) RETURNS VOID AS $$
BEGIN
    DELETE FROM add_cart 
    WHERE customer_id = p_customer_id 
    AND drug_id = p_medicine_id 
    AND pharmacy_id = p_pharmacy_id;
    RAISE NOTICE 'Deleted medicine from cart successfully.';
EXCEPTION
    WHEN others THEN
        RAISE EXCEPTION 'Error deleting medicine from cart: %', SQLERRM;
END;
$$ LANGUAGE plpgsql;

 

---------TRIGGER 5

CREATE OR REPLACE FUNCTION backup_done_purchased_medicines()
RETURNS TRIGGER AS $$
BEGIN
    -- Insert the deleted row into the backup table
    INSERT INTO done_purchased_medicines_backup (customer_id, pharmacy_id, drug_id, amount_purchased, cost)
    VALUES (OLD.customer_id, OLD.pharmacy_id, OLD.drug_id, OLD.amount_purchased, OLD.cost);
    RETURN OLD;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER backup_done_purchased_medicines_trigger
AFTER DELETE ON done_purchased_medicines
FOR EACH ROW
EXECUTE FUNCTION backup_done_purchased_medicines();

